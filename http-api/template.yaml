AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Parameters:
  UserPoolId:
    Type: String
    Description: User PoolID for Cognito Provider
  Audience:
    Type: String
    Description: Client Id for User Pool

Globals:
  Function:
    Timeout: 5
    Handler: app.lambdaHandler
    Runtime: nodejs12.x

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        #DefaultAuthorizer: UserAuth
        Authorizers:
          GeneralAuth:
            AuthorizationScopes:
              - email
            IdentitySource: '$request.header.Authorization'
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - Get
        AllowOrigins:
          - http://localhost:8080

  #Open Route
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
            ApiId: !Ref HttpApi

  #Basic Auth
  SimpleLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
            Path: /simple
            Method: get
            ApiId: !Ref HttpApi

  # Route for admins only: requires custom token (see cognito example)
  AdminLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub admin-${Audience}
            Path: /admin
            Method: get
            ApiId: !Ref HttpApi

  # Route for SU only: requires custom token (see cognito example)
  SuperUserLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub su-${Audience}
            Path: /su
            Method: get
            ApiId: !Ref HttpApi

  # Route for Admins and SU only: requires custom token (see cognito example)
  BothLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Events:
        DosGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: GeneralAuth
              AuthorizationScopes:
                - !Sub admin-${Audience}
                - !Sub su-${Audience}
            Path: /both
            Method: get
            ApiId: !Ref HttpApi
