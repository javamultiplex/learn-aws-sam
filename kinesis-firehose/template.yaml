AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Kinesis Firehose Template

Resources:
  RawDataBucket:
    Type: AWS::S3::Bucket

  ProcessDataBucket:
    Type: AWS::S3::Bucket

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  CountTable:
    Type: AWS::Serverless::SimpleTable

  ProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 180
      Handler: process.handler
      CodeUri: src/
      Runtime: nodejs12.x
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref DynamoTable }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable

  CountFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: count.handler
      CodeUri: src/
      Runtime: nodejs12.x
      Timeout: 180
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref CountTable }
      Environment:
        Variables:
          TABLE_NAME: !Ref CountTable

  Firehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt ProcessDataBucket.Arn
        CompressionFormat: GZIP
        RoleARN: !GetAtt FirehoseAccessRole.Arn
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Type: Lambda
              Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt ProcessFunction.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        S3BackupMode: Enabled
        S3BackupConfiguration:
          BucketARN: !GetAtt RawDataBucket.Arn
          CompressionFormat: GZIP
          RoleARN: !GetAtt FirehoseAccessRole.Arn
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 1

  KinesisAnalyticsApp:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: >
        CREATE OR REPLACE STREAM "LINK_STREAM" ("resourcePath" varchar(16), link_count INTEGER);
        CREATE OR REPLACE PUMP "STREAM_PUMP" AS INSERT INTO "LINK_STREAM"
        SELECT STREAM "resourcePath", COUNT(*) AS link_count
            FROM "SESSIONS_STREAM_001"
            GROUP BY "resourcePath", STEP("SESSIONS_STREAM_001".ROWTIME BY INTERVAL '10' SECOND);
      Inputs:
        - InputSchema:
            RecordColumns:
              - Name: requestId
                Mapping: $.requestId
                SqlType: bigint
              - Name: ip
                Mapping: $.ip
                SqlType: varchar(16)
              - Name: status
                Mapping: $.status
                SqlType: varchar(8)
              - Name: resourcePath
                Mapping: $.resourcePath
                SqlType: varchar(16)
            RecordFormat:
              RecordFormatType: JSON
          KinesisFirehoseInput:
            ResourceARN: !GetAtt Firehose.Arn
            RoleARN: !GetAtt KinesisAnalyticsAccessRole.Arn
          NamePrefix: SESSIONS_STREAM

  KinesisAnalyticsOutput:
    Type: AWS::KinesisAnalytics::ApplicationOutput
    Properties:
      ApplicationName: !Ref KinesisAnalyticsApp
      Output:
        DestinationSchema:
          RecordFormatType: JSON
        LambdaOutput:
          ResourceARN: !GetAtt CountFunction.Arn
          RoleARN: !GetAtt KinesisAnalyticsAccessRole.Arn
        Name: LINK_STREAM

  FirehoseAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'firehose.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - s3:PutObject
                Resource:
                  - !GetAtt RawDataBucket.Arn
                  - !Sub
                    - ${Arn}/*
                    - { Arn: !GetAtt RawDataBucket.Arn }
                  - !GetAtt ProcessDataBucket.Arn
                  - !Sub
                    - ${Arn}/*
                    - { Arn: !GetAtt ProcessDataBucket.Arn }
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ProcessFunction.Arn

  KinesisAnalyticsAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service: 'kinesisanalytics.amazonaws.com'
      Policies:
        - PolicyName: KinesisAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:Get*
                  - kinesis:Describe*
                  - kinesis:Get*
                  - kinesis:List*
                  - kinesis:Put*
                Resource:
                  - !GetAtt Firehose.Arn
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - lambda:InvokeFunction
                  - lambda:Get*
                Resource:
                  - !GetAtt CountFunction.Arn
                  - !Sub
                    - ${Func}:$Latest
                    - { Func: !GetAtt CountFunction.Arn }
